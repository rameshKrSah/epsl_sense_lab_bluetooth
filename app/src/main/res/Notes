- BluetoothAdapter represents the local Bluetooth adapter or radio and is the entry-point for all
Bluetooth interaction. Using this we can discover other Bluetooth devices, query a list of bonded
devices, instantiate a Bluetooth device using a known MAC address, and create a BluetoothServerSocket
to listen for communications from other devices.

- BluetoothDevice represents a remote Bluetooth device and is used to request a connection with
a remote device through BluetoothSocket or query information about the device such as its name,
address, class and bonding state.

- BluetoothSocket represents the interface for a Bluetooth socket and is the connection point
for data exchange with another Bluetooth device via InputStream and OutputStream.

- BluetoothServerSocket represents an open server that listens for incoming requests in order to
connect two Bluetooth devices. When a remote Bluetooth device makes a connection request to server
, BluetoothServerSocket will return a connected BluetoothSocket when the connection is accepted.

=========================================== XXX ===============================================
In order to use Bluetooth features, we need these permissions:

1. <uses-permission android:name="android.permission.BLUETOOTH"/>

2. <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>

<!-- If the app targets Android 9 or lower we can use Coarse Location -->
3. <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>


1. Classic Bluetooth is the for battery-intensive operations. From Android 4.3 (API 18) Bluetooth
low energy is also supported.

2. First form a Bluetooth channel between the pairing devices.
3. Another device finds the discoverable device using a service discovery process.
4. After the discoverable device accepts the pairing request, the two device complete a bonding
process where they exchange security keys. The device caches these keys for later use.
5. After pairing and bonding data can be sent and received over the established channel.
6. After the session is complete, the device which initiated the pairing process releases the
channel but the two device remains bonded so that they can reconnect automatically if they are in
range.

We need three permissions:
1. BLUETOOTH :: For Bluetooth functionality
2. BLUETOOTH_ADMIN :: To initiate device discovery or manipulate Bluetooth settings.
3. ACCESS_FINE_LOCATION


How to set up the Bluetooth ?
1. Verify Bluetooth is present in the device. Use BluetoothAdapter
2. Check if Bluetooth is enable or not. If not ask user to enable it.

In order to create a connection between two devices, we must implement both the server side and
client side mechanisms, because one device must open a server socket, and the other one must
initiate the connection using the server device's MAC address.

The server receives socket information when an incoming connection is accepted. The client provides
socket information when it opens an RFCOMM channel to the server. The server and client are
considered connected to each other when they each have a connected BluetoothSocket on the same
RFCOMM channel. Now, each device can obtain input and output streams, and transfer data.


We can prepare each device as a server so that each device has a server socket open and is
listening for connections. Now, either device can initiate a connection with the other and
become the client. Or one device can explicitly host the connection and open a server socket on
demand, and the other device initiates the connection.

When we want to connect two devices, one must act as a server by holding an open
BluetoothServerSocket. BluetoothServerSocket listens for incoming connection requests and provide
a connected BluetoothSocket once a request is accepted. The accept() call is blocking and hence
should not be executed on the UI thread. It usually makes sense to do all work that involves a
BluetoothServerSocket and BluetoothSocket in a new thread managed by the application.

To abort a blocked call such as accept(), call close() on the BluetoothServerSocket or
BluetoothSocket from another thread. All methods in BluetoothServerSocket and BluetoothSocket
are thread safe.

To use a matching UUID, hard-code the UUID string into your application, and then reference it
from both the server and client code.

We can find remote Bluetooth devices using BluetoothAdapter if the devices are made discoverable.
If a device is discoverable, then it will respond to the discover request by sharing some information
such as the device name, class, and its unique MAC address. Using these information, the device
performing discovery can then choose to initiate a connection to the discovered device.

When a device is paired, the basic information about the device (such as the device name, class,
and MAC address) is saved and can be read using the Bluetooth APIs. Using the known MAC address
for a remote device, a connection can be initiated with it at any time without performing discovery.

To be paired and connected are two different things: to be paired means that two devices are
aware of each other's existence, have a shared link-key that can be used for authentication, and
are capable of establishing an encrypted connection with each other. To be connected means that
the devices currently share an RFCOMM channel and are able to transmit data with each other.

The Android Bluetooth API requires the devices to be paired before an RFCOMM connection can be
established.


Performing device discovery consumes a lot of the Bluetooth adapters resources. After we have
found a device to connect to, be certain to stop discovery with cancelDiscovery before
attempting a connection. We should also not start discovery when connected to other devices.

In order to receive information about each device discovered, we need to register a
BroadcastReceiver for the ACTION_FOUND intent. The system broadcasts this intent for each
device. The intent contains the extra fields EXTRA_DEVICE and EXTRA_CLASS, which contain a
BluetoothDevice and a BluetoothClass.

The UUID of a device is available after it is paired. For pairing we just need the MAC address of a
device.

